// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/10/2017 12:59:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          cLock
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module cLock_vlg_vec_tst();
// constants                                           
// general purpose registers
reg C;
reg Enter;
reg Max;
reg clock;
reg reset;
// wires                                               
wire Corr;
wire Err;
wire Rst;

// assign statements (if any)                          
cLock i1 (
// port map - connection between master ports and signals/registers   
	.C(C),
	.Corr(Corr),
	.Enter(Enter),
	.Err(Err),
	.Max(Max),
	.Rst(Rst),
	.clock(clock),
	.reset(reset)
);
initial 
begin 
#1000000 $finish;
end 

// C
initial
begin
	C = 1'b0;
	C = #20000 1'b1;
	C = #90000 1'b0;
	C = #50000 1'b1;
	C = #130000 1'b0;
	C = #60000 1'b1;
	C = #20000 1'b0;
	C = #30000 1'b1;
	C = #80000 1'b0;
	C = #120000 1'b1;
	C = #60000 1'b0;
	C = #150000 1'b1;
	C = #50000 1'b0;
end 

// Enter
initial
begin
	Enter = 1'b0;
	Enter = #100000 1'b1;
	Enter = #10000 1'b0;
	Enter = #170000 1'b1;
	Enter = #10000 1'b0;
	Enter = #70000 1'b1;
	Enter = #10000 1'b0;
	Enter = #100000 1'b1;
	Enter = #10000 1'b0;
	Enter = #170000 1'b1;
	Enter = #10000 1'b0;
	Enter = #50000 1'b1;
	Enter = #10000 1'b0;
	Enter = #50000 1'b1;
	Enter = #10000 1'b0;
	Enter = #70000 1'b1;
	Enter = #10000 1'b0;
	Enter = #90000 1'b1;
	Enter = #40000 1'b0;
end 

// Max
initial
begin
	Max = 1'b0;
	Max = #470000 1'b1;
	Max = #10000 1'b0;
	Max = #370000 1'b1;
	Max = #10000 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #5000 1'b1;
	#5000;
end 

// reset
initial
begin
	reset = 1'b0;
	reset = #530000 1'b1;
	reset = #60000 1'b0;
	reset = #310000 1'b1;
	reset = #40000 1'b0;
end 
endmodule

